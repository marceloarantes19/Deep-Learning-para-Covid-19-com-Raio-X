from keras.layers import Conv2D, Flatten, Dense, MaxPooling2D, Dropout, Activation, BatchNormalization
from keras.models import Sequential
from keras import regularizers
from keras.optimizers import SGD
class Vgg16M:
  @staticmethod
  def build(width, height, depth, classes):
    inputShape = (height, width, depth)
    wght_decay = 0.00005
    model = Sequential()
    model.add(Conv2D(64, (3, 3), padding="same", input_shape=inputShape, kernel_regularizer=regularizers.l2(wght_decay))) 
    model.add(Activation('relu'))
    model.add(BatchNormalization())
    model.add(Dropout(0.3))
    model.add(Conv2D(64, (3, 3), padding="same", kernel_regularizer=regularizers.l2(wght_decay)))
    model.add(Activation('relu'))
    model.add(BatchNormalization())
    model.add(MaxPooling2D(pool_size=(2, 2)))
    model.add(Conv2D(128, (3, 3), padding="same", kernel_regularizer=regularizers.l2(wght_decay)))
    model.add(Activation('relu'))
    model.add(BatchNormalization())
    model.add(Dropout(0.4))
    model.add(Conv2D(128, (3, 3), padding="same", kernel_regularizer=regularizers.l2(wght_decay)))
    model.add(Activation('relu'))
    model.add(BatchNormalization())
    model.add(MaxPooling2D(pool_size=(2, 2)))
    model.add(Conv2D(256, (3, 3), padding="same", kernel_regularizer=regularizers.l2(wght_decay))) 
    model.add(Activation('relu'))
    model.add(BatchNormalization())
    model.add(Dropout(0.4))
    model.add(Conv2D(256, (3, 3), padding="same", kernel_regularizer=regularizers.l2(wght_decay))) 
    model.add(Activation('relu'))
    model.add(BatchNormalization())
    model.add(Dropout(0.4))
    model.add(Conv2D(256, (3, 3), padding="same", kernel_regularizer=regularizers.l2(wght_decay))) 
    model.add(Activation('relu'))
    model.add(BatchNormalization())
    model.add(MaxPooling2D(pool_size=(2, 2)))
    model.add(Conv2D(512, (3, 3), padding="same", kernel_regularizer=regularizers.l2(wght_decay))) 
    model.add(Activation('relu'))
    model.add(BatchNormalization())
    model.add(Dropout(0.4))
    model.add(Conv2D(512, (3, 3), padding="same", kernel_regularizer=regularizers.l2(wght_decay))) 
    model.add(Activation('relu'))
    model.add(BatchNormalization())
    model.add(Dropout(0.4))
    model.add(Conv2D(512, (3, 3), padding="same", kernel_regularizer=regularizers.l2(wght_decay))) 
    model.add(Activation('relu'))
    model.add(BatchNormalization())
    model.add(MaxPooling2D(pool_size=(2, 2)))
    model.add(Conv2D(512, (3, 3), padding="same", kernel_regularizer=regularizers.l2(wght_decay)))
    model.add(Activation('relu'))
    model.add(BatchNormalization())
    model.add(Dropout(0.4))
    model.add(Conv2D(512, (3, 3), padding="same", kernel_regularizer=regularizers.l2(wght_decay)))
    model.add(Activation('relu'))
    model.add(BatchNormalization())
    model.add(Dropout(0.4))
    model.add(Conv2D(512, (3, 3), padding="same", kernel_regularizer=regularizers.l2(wght_decay))) 
    model.add(Activation('relu'))
    model.add(BatchNormalization())
    model.add(MaxPooling2D(pool_size=(2, 2))) 
    model.add(Dropout(0.5))
    model.add(Flatten()) 
    model.add(Dense(512, kernel_regularizer=regularizers.l2(wght_decay))) 
    model.add(Activation('relu'))
    model.add(BatchNormalization())
    model.add(Dropout(0.5)) 
    model.add(Dense(classes)) 
    model.add(Activation('softmax'))
    model.compile(loss='categorical_crossentropy', optimizer=SGD(lr=0.1, momentum=0.0, decay=0.0), metrics=['accuracy'])
    return model    
